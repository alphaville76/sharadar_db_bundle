from datetime import timedelta

import pandas as pd
# Generated by CodiumAI

from sharadar.data.sql_lite_assets import SQLiteAssetFinder

import pytest
from sqlalchemy import create_engine


class TestSQLiteAssetFinder:

    #  Retrieve asset dictionaries with live trading adjustments
    def test_retrieve_asset_dicts_with_live_trading_adjustments(self):
        # Given
        engine = create_engine('sqlite:///:memory:')
        finder = SQLiteAssetFinder(engine)
        finder.is_live_trading = True
        sids = [1, 2, 3]
        asset_tbl = 'equities'
        querying_equities = True

        # When
        result = finder._retrieve_asset_dicts(sids, asset_tbl, querying_equities)

        # Then
        for row in result:
            assert row['end_date'] == row['end_date'] + timedelta(days=5)
            assert row['auto_close_date'] == row['auto_close_date'] + timedelta(days=5)

    #  Retrieve asset dictionaries with empty sids list
    def test_retrieve_asset_dicts_with_empty_sids_list(self):
        # Given
        engine = create_engine('sqlite:///:memory:')
        finder = SQLiteAssetFinder(engine)
        sids = []
        asset_tbl = 'equities'
        querying_equities = True

        # When
        result = finder._retrieve_asset_dicts(sids, asset_tbl, querying_equities)

        # Then
        assert result == []

    #  Get fundamentals with non-existent sids
    def test_get_fundamentals_with_non_existent_sids(self):
        # Given
        engine = create_engine('sqlite:///:memory:')
        finder = SQLiteAssetFinder(engine)
        sids = [9999]
        field_name = 'revenue_arq'
        as_of_date = pd.Timestamp('2023-01-01')

        # When
        result = finder.get_fundamentals(sids, field_name, as_of_date)

        # Then
        assert result == []
